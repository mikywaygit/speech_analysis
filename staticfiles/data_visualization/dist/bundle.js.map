{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://truth_will_set_you_free/./apps/data_visualization/static/data_visualization/js/webgl-utils/shaders.js","webpack://truth_will_set_you_free/./apps/data_visualization/static/data_visualization/js/webgl-utils/buffers.js","webpack://truth_will_set_you_free/./node_modules/gl-matrix/esm/common.js","webpack://truth_will_set_you_free/./node_modules/gl-matrix/esm/mat4.js","webpack://truth_will_set_you_free/./apps/data_visualization/static/data_visualization/js/webgl-utils/render.js","webpack://truth_will_set_you_free/./apps/data_visualization/static/data_visualization/js/main.js"],"sourcesContent":["export function loadShader(gl, type, source) {\n    const shader = gl.createShader(type);\n    gl.shaderSource(shader, source);\n    gl.compileShader(shader);\n\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n        const shaderType = type === gl.VERTEX_SHADER ? 'VERTEX_SHADER' : 'FRAGMENT_SHADER';\n        console.error(`An error occurred compiling the ${shaderType}: ${gl.getShaderInfoLog(shader)}`);\n        console.error(`Shader source that failed to compile:\\n${source}`);\n        gl.deleteShader(shader);\n        return null;\n    }\n\n    return shader;\n}\n\nexport function initShaderProgram(gl, vsSource, fsSource) {\n    const vertexShader = loadShader(gl, gl.VERTEX_SHADER, vsSource);\n    const fragmentShader = loadShader(gl, gl.FRAGMENT_SHADER, fsSource);\n\n    const shaderProgram = gl.createProgram();\n    gl.attachShader(shaderProgram, vertexShader);\n    gl.attachShader(shaderProgram, fragmentShader);\n    gl.linkProgram(shaderProgram);\n\n    if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {\n        console.error('Unable to initialize the shader program: ' + gl.getProgramInfoLog(shaderProgram));\n        return null;\n    }\n\n    return shaderProgram;\n}\n\n// Vertex shader program\nexport const vsSource = `\n    attribute vec3 aVertexPosition;\n    uniform mat4 uModelViewMatrix;\n    uniform mat4 uProjectionMatrix;\n\n    void main(void) {\n        gl_Position = uProjectionMatrix * uModelViewMatrix * vec4(aVertexPosition, 1.0);\n    }\n`;\n\n// Fragment shader program\nexport const fsSource = `\n    void main(void) {\n        gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0); // Set the color to white\n    }\n`;\n","export function initBuffers(gl) {\n    if (!gl) {\n        console.error('WebGL context is not available.');\n        return;\n    }\n\n    // Buffer for the cube's vertices\n    const positionBuffer = gl.createBuffer();\n    if (!positionBuffer) {\n        console.error('Failed to create a position buffer.');\n        return;\n    }\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n\n     const positions = [\n        // Front face\n        -1.0, -1.0,  1.0,\n         1.0, -1.0,  1.0,\n         1.0,  1.0,  1.0,\n        -1.0,  1.0,  1.0,\n\n        // Back face\n        -1.0, -1.0, -1.0,\n         1.0, -1.0, -1.0,\n         1.0,  1.0, -1.0,\n        -1.0,  1.0, -1.0,\n\n        // Top face\n        -1.0,  1.0, -1.0,\n        -1.0,  1.0,  1.0,\n         1.0,  1.0,  1.0,\n         1.0,  1.0, -1.0,\n\n        // Bottom face\n        -1.0, -1.0, -1.0,\n         1.0, -1.0, -1.0,\n         1.0, -1.0,  1.0,\n        -1.0, -1.0,  1.0,\n\n        // Right face\n         1.0, -1.0, -1.0,\n         1.0,  1.0, -1.0,\n         1.0,  1.0,  1.0,\n         1.0, -1.0,  1.0,\n\n        // Left face\n        -1.0, -1.0, -1.0,\n        -1.0, -1.0,  1.0,\n        -1.0,  1.0,  1.0,\n        -1.0,  1.0, -1.0,\n    ];\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW);\n\n    // Create a buffer for the cube's indices\n    const indexBuffer = gl.createBuffer();\n    if (!indexBuffer) {\n        console.error('Failed to create an index buffer.');\n        return;\n    }\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);\n\n     const indices = [\n        0, 1, 2,     0, 2, 3,    // front\n        4, 5, 6,     4, 6, 7,    // back\n        8, 9, 10,    8, 10, 11,  // top\n        12, 13, 14,  12, 14, 15, // bottom\n        16, 17, 18,  16, 18, 19, // right\n        20, 21, 22,  20, 22, 23, // left\n    ];\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indices), gl.STATIC_DRAW);\n\n    return {\n        position: positionBuffer,\n        indices: indexBuffer,\n    };\n}\n","/**\n * Common utilities\n * @module glMatrix\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};","import * as glMatrix from \"./common.js\";\n/**\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\n * @module mat4\n */\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\n * Calculates the determinant of a mat4\n *\n * @param {ReadonlyMat4} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to translate\n * @param {ReadonlyVec3} v vector to translate by\n * @returns {mat4} out\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 from a dual quat.\n *\n * @param {mat4} out Matrix\n * @param {ReadonlyQuat2} a Dual Quaternion\n * @returns {mat4} mat4 receiving operation result\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.hypot(m11, m12, m13);\n  out[1] = Math.hypot(m21, m22, m23);\n  out[2] = Math.hypot(m31, m32, m33);\n  return out;\n}\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\n\nexport function getRotation(out, mat) {\n  var scaling = new glMatrix.ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n  var is1 = 1 / scaling[0];\n  var is2 = 1 / scaling[1];\n  var is3 = 1 / scaling[2];\n  var sm11 = mat[0] * is1;\n  var sm12 = mat[1] * is2;\n  var sm13 = mat[2] * is3;\n  var sm21 = mat[4] * is1;\n  var sm22 = mat[5] * is2;\n  var sm23 = mat[6] * is3;\n  var sm31 = mat[8] * is1;\n  var sm32 = mat[9] * is2;\n  var sm33 = mat[10] * is3;\n  var trace = sm11 + sm22 + sm33;\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveNO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\n * Alias for {@link mat4.perspectiveNO}\n * @function\n */\n\nexport var perspective = perspectiveNO;\n/**\n * Generates a perspective projection matrix suitable for WebGPU with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveZO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = far * nf;\n    out[14] = far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -near;\n  }\n\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoNO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Alias for {@link mat4.orthoNO}\n * @function\n */\n\nexport var ortho = orthoNO;\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoZO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = near * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.hypot(z0, z1, z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.hypot(x0, x1, x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.hypot(y0, y1, y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat4\n *\n * @param {ReadonlyMat4} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \", \" + a[9] + \", \" + a[10] + \", \" + a[11] + \", \" + a[12] + \", \" + a[13] + \", \" + a[14] + \", \" + a[15] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\n}\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\n\nexport var sub = subtract;","import * as mat4 from 'gl-matrix/mat4';\n\nexport function drawScene(gl, programInfo, buffers, projectionMatrix, modelViewMatrix) {\n    if (!gl) {\n        console.error('WebGL context is not available.');\n        return;\n    }\n\n    gl.clearColor(0.0, 0.0, 0.0, 1.0); // Clear to black, fully opaque\n    gl.clearDepth(1.0); // Clear everything\n    gl.enable(gl.DEPTH_TEST); // Enable depth testing\n    gl.depthFunc(gl.LEQUAL); // Near things obscure far things\n\n    // Clear the canvas\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffers.position);\n    if (!buffers.position) {\n        console.error('Position buffer is not available.');\n    }\n    gl.vertexAttribPointer(programInfo.attribLocations.vertexPosition, 3, gl.FLOAT, false, 0, 0);\n    gl.enableVertexAttribArray(programInfo.attribLocations.vertexPosition);\n\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffers.indices);\n    if (!buffers.indices) {\n        console.error('Index buffer is not available.');\n    }\n\n    // Error checking for shader program uniform locations\n    if (!programInfo.uniformLocations.projectionMatrix || !programInfo.uniformLocations.modelViewMatrix) {\n        console.error('Shader program uniform location is not available.');\n    }\n\n    mat4.perspective(projectionMatrix, 45 * Math.PI / 180,\n                     gl.canvas.clientWidth / gl.canvas.clientHeight,\n                     0.1,\n                     100.0);\n    mat4.translate(modelViewMatrix, modelViewMatrix, [-0.0, 0.0, -6.0]);\n\n    gl.uniformMatrix4fv(programInfo.uniformLocations.projectionMatrix, false, projectionMatrix);\n    gl.uniformMatrix4fv(programInfo.uniformLocations.modelViewMatrix, false, modelViewMatrix);\n\n    gl.drawElements(gl.TRIANGLES, 36, gl.UNSIGNED_SHORT, 0);\n}\n\nexport function render(gl, programInfo, buffers, then) {\n    requestAnimationFrame(function(now) {\n        if (!now) {\n            console.error('RequestAnimationFrame did not provide a timestamp.');\n            return;\n        }\n\n        now *= 0.001; // convert time to seconds\n        const deltaTime = now - then.value; // Calculate the time difference since the last frame\n        then.value = now;\n\n        const projectionMatrix = mat4.create();\n        const modelViewMatrix = mat4.create();\n\n        if (!projectionMatrix || !modelViewMatrix) {\n            console.error('Failed to create matrix.');\n            return;\n        }\n\n        drawScene(gl, programInfo, buffers, projectionMatrix, modelViewMatrix);\n\n        requestAnimationFrame(render.bind(null, gl, programInfo, buffers, then));\n    });\n}\n","// js/main.js\nimport { initShaderProgram } from './webgl-utils/shaders.js';\nimport { initBuffers } from './webgl-utils/buffers.js';\nimport { drawScene,  render, vsSource, fsSource } from './webgl-utils/render.js';\n\n\n// Expose functions to the global scope for debugging\nwindow.initShaderProgram = initShaderProgram;\nwindow.initBuffers = initBuffers;\nwindow.drawScene = drawScene;\nwindow.render = render;\n\n\nasync function main() {\n    const canvas = document.getElementById('webgl-canvas');\n    const gl = canvas.getContext('webgl');\n\n    if (!gl) {\n        console.error('Unable to initialize WebGL.');\n        return;\n    }\n\n    // Assuming vsSource and fsSource are defined here or imported\n    const vsSource = `\n        attribute vec4 aVertexPosition;\n        uniform mat4 uModelViewMatrix;\n        uniform mat4 uProjectionMatrix;\n        \n        void main() {\n            gl_Position = uProjectionMatrix * uModelViewMatrix * aVertexPosition;\n        }\n    `;\n    const fsSource = `\n        void main() {\n            gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);\n        }\n    `;\n\n    const shaderProgram = initShaderProgram(gl, vsSource, fsSource);\n    if (!shaderProgram) {\n        console.error('Initializing shader program failed.');\n        return;\n    }\n\n    const programInfo = {\n        program: shaderProgram,\n        attribLocations: {\n            vertexPosition: gl.getAttribLocation(shaderProgram, 'aVertexPosition'),\n        },\n        uniformLocations: {\n            projectionMatrix: gl.getUniformLocation(shaderProgram, 'uProjectionMatrix'),\n            modelViewMatrix: gl.getUniformLocation(shaderProgram, 'uModelViewMatrix'),\n        },\n    };\n\n    const buffers = initBuffers(gl);\n    if (!buffers) {\n        console.error('Initializing buffers failed.');\n        return;\n    }\n\n    drawScene(gl, programInfo, buffers);\n    render(gl, programInfo, buffers);\n}\n\ndocument.addEventListener('DOMContentLoaded', main);\n\n//# sourceMappingURL=bundle.js.map"],"names":["loadShader","gl","type","source","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","shaderType","VERTEX_SHADER","console","error","concat","getShaderInfoLog","deleteShader","initShaderProgram","vsSource","fsSource","vertexShader","fragmentShader","FRAGMENT_SHADER","shaderProgram","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","initBuffers","positionBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","indexBuffer","ELEMENT_ARRAY_BUFFER","Uint16Array","position","indices","ARRAY_TYPE","Array","create","out","Math","random","PI","hypot","y","i","arguments","length","sqrt","perspective","fovy","aspect","near","far","nf","f","tan","Infinity","drawScene","programInfo","buffers","projectionMatrix","modelViewMatrix","a","v","a00","a01","a02","a03","a10","a11","a12","a13","a20","a21","a22","a23","x","z","clearColor","clearDepth","enable","DEPTH_TEST","depthFunc","LEQUAL","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","vertexAttribPointer","attribLocations","vertexPosition","FLOAT","enableVertexAttribArray","uniformLocations","mat4","canvas","clientWidth","clientHeight","uniformMatrix4fv","drawElements","TRIANGLES","UNSIGNED_SHORT","render","then","requestAnimationFrame","now","value","bind","_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","Symbol","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","Context","makeInvokeMethod","tryCatch","arg","call","h","l","s","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","asyncGeneratorStep","gen","reject","_next","_throw","key","info","_main","fn","_callee","_context","document","getElementById","getContext","program","getAttribLocation","getUniformLocation","self","args","apply","err","undefined","window","addEventListener"],"sourceRoot":""}