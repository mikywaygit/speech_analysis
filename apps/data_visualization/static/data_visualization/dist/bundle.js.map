{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://truth_will_set_you_free/./node_modules/gl-matrix/esm/common.js","webpack://truth_will_set_you_free/./node_modules/gl-matrix/esm/mat4.js","webpack://truth_will_set_you_free/./apps/data_visualization/static/data_visualization/js/webgl-utils/shaders.js","webpack://truth_will_set_you_free/./apps/data_visualization/static/data_visualization/js/webgl-utils/buffers.js","webpack://truth_will_set_you_free/./apps/data_visualization/static/data_visualization/js/webgl-utils/render.js","webpack://truth_will_set_you_free/./apps/data_visualization/static/data_visualization/js/interactions.js","webpack://truth_will_set_you_free/./apps/data_visualization/static/data_visualization/js/main.js"],"sourcesContent":["/**\n * Common utilities\n * @module glMatrix\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};","import * as glMatrix from \"./common.js\";\n/**\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\n * @module mat4\n */\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\n * Calculates the determinant of a mat4\n *\n * @param {ReadonlyMat4} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to translate\n * @param {ReadonlyVec3} v vector to translate by\n * @returns {mat4} out\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 from a dual quat.\n *\n * @param {mat4} out Matrix\n * @param {ReadonlyQuat2} a Dual Quaternion\n * @returns {mat4} mat4 receiving operation result\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.hypot(m11, m12, m13);\n  out[1] = Math.hypot(m21, m22, m23);\n  out[2] = Math.hypot(m31, m32, m33);\n  return out;\n}\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\n\nexport function getRotation(out, mat) {\n  var scaling = new glMatrix.ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n  var is1 = 1 / scaling[0];\n  var is2 = 1 / scaling[1];\n  var is3 = 1 / scaling[2];\n  var sm11 = mat[0] * is1;\n  var sm12 = mat[1] * is2;\n  var sm13 = mat[2] * is3;\n  var sm21 = mat[4] * is1;\n  var sm22 = mat[5] * is2;\n  var sm23 = mat[6] * is3;\n  var sm31 = mat[8] * is1;\n  var sm32 = mat[9] * is2;\n  var sm33 = mat[10] * is3;\n  var trace = sm11 + sm22 + sm33;\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveNO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\n * Alias for {@link mat4.perspectiveNO}\n * @function\n */\n\nexport var perspective = perspectiveNO;\n/**\n * Generates a perspective projection matrix suitable for WebGPU with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveZO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = far * nf;\n    out[14] = far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -near;\n  }\n\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoNO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Alias for {@link mat4.orthoNO}\n * @function\n */\n\nexport var ortho = orthoNO;\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoZO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = near * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.hypot(z0, z1, z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.hypot(x0, x1, x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.hypot(y0, y1, y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat4\n *\n * @param {ReadonlyMat4} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \", \" + a[9] + \", \" + a[10] + \", \" + a[11] + \", \" + a[12] + \", \" + a[13] + \", \" + a[14] + \", \" + a[15] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\n}\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\n\nexport var sub = subtract;","export function loadShader(gl, type, source) {\n    const shader = gl.createShader(type);\n    gl.shaderSource(shader, source);\n    gl.compileShader(shader);\n\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n        const shaderType = type === gl.VERTEX_SHADER ? 'VERTEX_SHADER' : 'FRAGMENT_SHADER';\n        console.error(`An error occurred compiling the ${shaderType}: ${gl.getShaderInfoLog(shader)}`);\n        console.error(`Shader source that failed to compile:\\n${source}`);\n        gl.deleteShader(shader);\n        return null;\n    }\n\n    return shader;\n}\n\nexport function initShaderProgram(gl, vsSource, fsSource) {\n    const vertexShader = loadShader(gl, gl.VERTEX_SHADER, vsSource);\n    const fragmentShader = loadShader(gl, gl.FRAGMENT_SHADER, fsSource);\n\n    const shaderProgram = gl.createProgram();\n    gl.attachShader(shaderProgram, vertexShader);\n    gl.attachShader(shaderProgram, fragmentShader);\n    gl.linkProgram(shaderProgram);\n\n    if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {\n        console.error('Unable to initialize the shader program: ' + gl.getProgramInfoLog(shaderProgram));\n        return null;\n    }\n\n    return shaderProgram;\n}\n\n// Vertex shader program remains unchanged\nexport const vsSource = `\n    attribute vec3 aVertexPosition;\n    uniform mat4 uModelViewMatrix;\n    uniform mat4 uProjectionMatrix;\n\n    void main(void) {\n        gl_Position = uProjectionMatrix * uModelViewMatrix * vec4(aVertexPosition, 1.0);\n    }\n`;\n\n// Fragment shader program updated to set the color to red\nexport const fsSource = `\n    precision mediump float;\n    uniform vec4 uColor; // Add this uniform for dynamic color control\n\n    void main(void) {\n        gl_FragColor = uColor; // Use the uniform color\n    }\n`;\n\n","export function initBuffers(gl) {\n    if (!gl) {\n        console.error('WebGL context is not available.');\n        return null;\n    }\n\n    // Buffer for the cube's vertices\n    const positionBuffer = gl.createBuffer();\n    if (!positionBuffer) {\n        console.error('Failed to create a position buffer.');\n        return null;\n    }\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n\n    const positions = [\n        // Front face\n        -1.0, -1.0, 1.0,\n        1.0, -1.0, 1.0,\n        1.0, 1.0, 1.0,\n        -1.0, 1.0, 1.0,\n        // Back face\n        -1.0, -1.0, -1.0,\n        1.0, -1.0, -1.0,\n        1.0, 1.0, -1.0,\n        -1.0, 1.0, -1.0,\n        // Top face\n        -1.0, 1.0, -1.0,\n        -1.0, 1.0, 1.0,\n        1.0, 1.0, 1.0,\n        1.0, 1.0, -1.0,\n        // Bottom face\n        -1.0, -1.0, -1.0,\n        1.0, -1.0, -1.0,\n        1.0, -1.0, 1.0,\n        -1.0, -1.0, 1.0,\n        // Right face\n        1.0, -1.0, -1.0,\n        1.0, 1.0, -1.0,\n        1.0, 1.0, 1.0,\n        1.0, -1.0, 1.0,\n        // Left face\n        -1.0, -1.0, -1.0,\n        -1.0, -1.0, 1.0,\n        -1.0, 1.0, 1.0,\n        -1.0, 1.0, -1.0,\n    ];\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW);\n\n    // Create a buffer for the cube's face indices\n    const indexBuffer = gl.createBuffer();\n    if (!indexBuffer) {\n        console.error('Failed to create an index buffer.');\n        return null;\n    }\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);\n\n    const indices = [\n        0, 1, 2, 0, 2, 3, // Front face\n        4, 5, 6, 4, 6, 7, // Back face\n        8, 9, 10, 8, 10, 11, // Top face\n        12, 13, 14, 12, 14, 15, // Bottom face\n        16, 17, 18, 16, 18, 19, // Right face\n        20, 21, 22, 20, 22, 23, // Left face\n    ];\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indices), gl.STATIC_DRAW);\n\n    // Create a buffer for the cube's edge lines\n    const edgeIndices = [\n        // Each pair of vertices forms a line for an edge of the cube\n        0, 1, 1, 2, 2, 3, 3, 0, // Front face edges\n        4, 5, 5, 6, 6, 7, 7, 4, // Back face edges\n        0, 4, 1, 5, 2, 6, 3, 7, // Connecting edges between front and back\n        8, 9, 9, 10, 10, 11, 11, 8, // Top face edges\n        12, 13, 13, 14, 14, 15, 15, 12, // Bottom face edges\n        16, 17, 17, 18, 18, 19, 19, 16, // Right face edges\n        20, 21, 21, 22, 22, 23, 23, 20, // Left face edges\n    ];\n    const edgeBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, edgeBuffer);\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(edgeIndices), gl.STATIC_DRAW);\n\n    // Add edge count for drawing lines\n    const edgeCount = edgeIndices.length / 2;\n\n    return {\n        position: positionBuffer,\n        indices: indexBuffer,\n        edgeIndices: edgeBuffer,\n        edgeCount: edgeCount, // Add edgeCount here\n    };\n}\n","import { mat4 } from 'gl-matrix';\n\nexport function drawScene(gl, programInfo, buffers, rotationAngles) {\n    if (!gl) {\n        console.error('WebGL context is not available.');\n        return;\n    }\n\n    gl.clearColor(0.5, 0.5, 0.5, 1.0); // Set clear color to gray, fully opaque\n    gl.clearDepth(1.0);                // Clear everything\n    gl.enable(gl.DEPTH_TEST);           // Enable depth testing\n    gl.depthFunc(gl.LEQUAL);            // Near things obscure far things\n\n    // Clear the canvas before we start drawing on it.\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n    // Create a perspective matrix, a special matrix that is used to simulate the distortion of perspective in a camera.\n    const fieldOfView = 45 * Math.PI / 180;   // in radians\n    const aspect = gl.canvas.clientWidth / gl.canvas.clientHeight;\n    const zNear = 0.1;\n    const zFar = 100.0;\n    const projectionMatrix = mat4.create();\n\n    // note: glmatrix.js always has the first argument as the destination to receive the result.\n    mat4.perspective(projectionMatrix, fieldOfView, aspect, zNear, zFar);\n\n    // Set the drawing position to the \"identity\" point, which is the center of the scene.\n    const modelViewMatrix = mat4.create();\n\n    // Now move the drawing position a bit to where we want to start drawing the square.\n    mat4.translate(modelViewMatrix,     // destination matrix\n                   modelViewMatrix,     // matrix to translate\n                   [-0.0, 0.0, -6.0]);  // amount to translate\n\n    // Rotate the modelView matrix using the rotation angles defined by mouse movement\n    mat4.rotate(modelViewMatrix,  // destination matrix\n                modelViewMatrix,  // matrix to rotate\n                rotationAngles.x,     // amount to rotate in radians\n                [1, 0, 0]);       // axis to rotate around (X)\n    mat4.rotate(modelViewMatrix,  // destination matrix\n                modelViewMatrix,  // matrix to rotate\n                rotationAngles.y,     // amount to rotate in radians\n                [0, 1, 0]);       // axis to rotate around (Y)\n    if (rotationAngles.z !== undefined) {\n        mat4.rotate(modelViewMatrix,  // destination matrix\n                    modelViewMatrix,  // matrix to rotate\n                    rotationAngles.z,     // amount to rotate in radians\n                    [0, 0, 1]);       // axis to rotate around (Z)\n    }\n\n    // Tell WebGL how to pull out the positions from the position\n    // buffer into the vertexPosition attribute.\n    {\n        const numComponents = 3;  // pull out 3 values per iteration\n        const type = gl.FLOAT;    // the data in the buffer is 32bit floats\n        const normalize = false;  // don't normalize\n        const stride = 0;         // how many bytes to get from one set of values to the next\n                                  // 0 = use type and numComponents above\n        const offset = 0;         // how many bytes inside the buffer to start from\n        gl.bindBuffer(gl.ARRAY_BUFFER, buffers.position);\n        gl.vertexAttribPointer(\n            programInfo.attribLocations.vertexPosition,\n            numComponents,\n            type,\n            normalize,\n            stride,\n            offset);\n        gl.enableVertexAttribArray(\n            programInfo.attribLocations.vertexPosition);\n    }\n\n    // Tell WebGL to use our program when drawing\n    gl.useProgram(programInfo.program);\n\n    // Set the shader uniforms\n    gl.uniformMatrix4fv(\n        programInfo.uniformLocations.projectionMatrix,\n        false,\n        projectionMatrix);\n    gl.uniformMatrix4fv(\n        programInfo.uniformLocations.modelViewMatrix,\n        false,\n        modelViewMatrix);\n\n    {\n        const vertexCount = 36;\n        const type = gl.UNSIGNED_SHORT;\n        const offset = 0;\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffers.indices);\n        gl.drawElements(gl.TRIANGLES, vertexCount, type, offset);\n    }\n\n    // Update the color to draw the edges if needed\n    gl.uniform4f(programInfo.uniformLocations.uColor, 0.0, 0.0, 0.0, 1.0); // Set the color to black\n    gl.drawElements(gl.LINES, buffers.edgeCount, gl.UNSIGNED_SHORT, 0); // Draw cube edges\n}\n\nexport function render(gl, programInfo, buffers, rotationAngles) {\n    requestAnimationFrame(function(time) {\n        // Here 'time' parameter is provided by requestAnimationFrame\n        // which could be used for animation purposes\n\n        drawScene(gl, programInfo, buffers, rotationAngles);\n\n        // Loop the render function call\n        requestAnimationFrame(render.bind(null, gl, programInfo, buffers, rotationAngles));\n    });\n}\n","// Define the utility function and other functionalities within the module scope\nconst toRadians = (angleInDegrees) => angleInDegrees * Math.PI / 180;\n\nconst handleMouseDown = function(event) {\n    this.isDragging = true;\n    this.previousMousePosition = { x: event.clientX, y: event.clientY };\n    console.log('MouseDown', { isDragging: this.isDragging, previousMousePosition: this.previousMousePosition });\n};\n\nconst handleMouseMove = function(event) {\n    if (!this.isDragging) return;\n\n    const deltaX = event.clientX - this.previousMousePosition.x;\n    const deltaY = event.clientY - this.previousMousePosition.y;\n\n    // Adjust deltaY based on the cube's current X rotation\n    const adjustedDeltaY = Math.cos(this.rotationAngles.x) >= 0 ? deltaY : -deltaY;\n\n    // Apply the adjusted delta values to the cube's rotation angles\n    this.rotationAngles.y += toRadians(deltaX);\n    this.rotationAngles.x -= toRadians(adjustedDeltaY);\n\n    this.previousMousePosition = { x: event.clientX, y: event.clientY };\n\n    console.log('MouseMove', { deltaX, deltaY, rotationAngles: this.rotationAngles });\n\n    // Assuming window.updateScene is defined elsewhere and responsible for the rendering\n    if (typeof window.updateScene === 'function') {\n        window.updateScene();\n    } else {\n        console.error('updateScene function is not defined.');\n    }\n};\n\nconst handleMouseUp = function(event) {\n    if (this.isDragging) {\n        this.isDragging = false;\n        console.log('MouseUp', { isDragging: this.isDragging });\n    }\n};\n\n// Package all interaction-related functionalities\nconst webGLInteraction = {\n    isDragging: false,\n    previousMousePosition: { x: 0, y: 0 },\n    rotationAngles: { x: 0, y: 0, z: 0 },\n    handleMouseDown,\n    handleMouseMove,\n    handleMouseUp,\n    setupInteractionHandlers: function(canvas) {\n        canvas.addEventListener('mousedown', this.handleMouseDown.bind(this), false);\n        canvas.addEventListener('mousemove', this.handleMouseMove.bind(this), false);\n        canvas.addEventListener('mouseup', this.handleMouseUp.bind(this), false);\n        canvas.addEventListener('mouseleave', this.handleMouseUp.bind(this), false);\n    }\n};\n\n// Export the entire namespace as a module\nexport { webGLInteraction, toRadians };\n\n","// Import necessary modules and functions\nimport { mat4 } from 'gl-matrix';\nimport { vsSource, fsSource, loadShader, initShaderProgram } from './webgl-utils/shaders.js';\nimport { initBuffers } from './webgl-utils/buffers.js';\nimport { drawScene } from './webgl-utils/render.js';\nimport { webGLInteraction, toRadians } from './interactions.js';\n\nasync function main() {\n    const canvas = document.getElementById('webgl-canvas');\n    const gl = canvas.getContext('webgl');\n\n    if (!gl) {\n        console.error('Unable to initialize WebGL.');\n        return;\n    }\n\n    // Assign globally accessible WebGL utilities\n    window.gl = gl;\n    window.loadShader = loadShader;\n    window.initShaderProgram = initShaderProgram;\n    window.initBuffers = initBuffers;\n    window.drawScene = drawScene;\n    window.toRadians = toRadians;  // Make sure toRadians is correctly imported and assigned\n    window.webGLInteraction = webGLInteraction;\n\n    // Initialize rotation angles\n    window.rotationAngles = { x: 0, y: 0, z: 0 };\n    window.lastRotationAngles = { x: 0, y: 0, z: 0 };\n\n    const shaderProgram = await window.initShaderProgram(gl, vsSource, fsSource);\n    if (!shaderProgram) {\n        console.error('Initializing shader program failed.');\n        return;\n    }\n\n    window.programInfo = {\n        program: shaderProgram,\n        attribLocations: {\n            vertexPosition: gl.getAttribLocation(shaderProgram, 'aVertexPosition'),\n        },\n        uniformLocations: {\n            projectionMatrix: gl.getUniformLocation(shaderProgram, 'uProjectionMatrix'),\n            modelViewMatrix: gl.getUniformLocation(shaderProgram, 'uModelViewMatrix'),\n            uColor: gl.getUniformLocation(shaderProgram, 'uColor'),\n        },\n    };\n\n    window.buffers = await window.initBuffers(gl);\n    if (!window.buffers) {\n        console.error('Initializing buffers failed.');\n        return;\n    }\n\n    // Setup interaction handlers using the methods from webGLInteraction\n    webGLInteraction.setupInteractionHandlers(canvas);\n\n    // Initialize and set up the projection matrix\n    window.projectionMatrix = mat4.create();\n    mat4.perspective(window.projectionMatrix, 45 * Math.PI / 180, gl.canvas.clientWidth / gl.canvas.clientHeight, 0.1, 100.0);\n\n    // Define and start the render loop\n    function renderLoop() {\n        if (window.rotationAngles.x !== window.lastRotationAngles.x ||\n            window.rotationAngles.y !== window.lastRotationAngles.y ||\n            window.rotationAngles.z !== window.lastRotationAngles.z) {\n            window.updateScene();\n            window.lastRotationAngles = { ...window.rotationAngles };\n        }\n        requestAnimationFrame(renderLoop);\n    }\n\n    renderLoop();\n}\n\n// Make main function globally accessible\nwindow.main = main;\n\n// Execute the main function once the DOM is fully loaded\ndocument.addEventListener('DOMContentLoaded', async () => {\n    await window.main();\n});\n\n// Define the updateScene function globally\nwindow.updateScene = () => {\n    // First, synchronize the global rotationAngles with those from the interaction\n    window.rotationAngles = { ...window.webGLInteraction.rotationAngles };\n\n    if (!window.gl || !window.programInfo || !window.buffers) {\n        console.error(\"WebGL context, programInfo, or buffers are not initialized.\");\n        return;\n    }\n\n    console.log(\"updateScene: WebGL context, programInfo, and buffers are initialized.\");\n    console.log(`updateScene: Current rotationAngles`, window.rotationAngles);\n    // Now drawScene uses the updated rotation angles for rendering\n    window.drawScene(window.gl, window.programInfo, window.buffers, window.rotationAngles);\n};\n"],"names":["EPSILON","ARRAY_TYPE","Float32Array","Array","create","out","rotate","a","rad","axis","s","c","t","a00","a01","a02","a03","a10","a11","a12","a13","a20","a21","a22","a23","b00","b01","b02","b10","b11","b12","b20","b21","b22","x","y","z","len","Math","hypot","sin","cos","random","PI","i","arguments","length","sqrt","perspective","fovy","aspect","near","far","nf","f","tan","Infinity","loadShader","gl","type","source","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","shaderType","VERTEX_SHADER","console","error","concat","getShaderInfoLog","deleteShader","initShaderProgram","vsSource","fsSource","vertexShader","fragmentShader","FRAGMENT_SHADER","shaderProgram","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","initBuffers","positionBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","indexBuffer","ELEMENT_ARRAY_BUFFER","Uint16Array","edgeIndices","edgeBuffer","position","indices","edgeCount","drawScene","programInfo","buffers","rotationAngles","clearColor","clearDepth","enable","DEPTH_TEST","depthFunc","LEQUAL","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","fieldOfView","canvas","clientWidth","clientHeight","projectionMatrix","mat4","v","modelViewMatrix","undefined","FLOAT","vertexAttribPointer","attribLocations","vertexPosition","enableVertexAttribArray","useProgram","program","uniformMatrix4fv","uniformLocations","UNSIGNED_SHORT","drawElements","TRIANGLES","uniform4f","uColor","LINES","toRadians","angleInDegrees","webGLInteraction","isDragging","previousMousePosition","handleMouseDown","event","this","clientX","clientY","log","handleMouseMove","deltaX","deltaY","adjustedDeltaY","window","updateScene","handleMouseUp","setupInteractionHandlers","addEventListener","bind","_regeneratorRuntime","e","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","Symbol","iterator","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","Context","makeInvokeMethod","tryCatch","arg","call","h","l","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","asyncGeneratorStep","gen","reject","_next","_throw","key","info","_asyncToGenerator","fn","self","args","apply","err","_main","_callee2","renderLoop","_context2","lastRotationAngles","_objectSpread","requestAnimationFrame","document","getElementById","getContext","getAttribLocation","getUniformLocation","main","_callee","_context"],"sourceRoot":""}