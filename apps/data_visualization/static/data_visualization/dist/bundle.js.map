{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://truth_will_set_you_free/webpack/bootstrap","webpack://truth_will_set_you_free/webpack/runtime/define property getters","webpack://truth_will_set_you_free/webpack/runtime/hasOwnProperty shorthand","webpack://truth_will_set_you_free/webpack/runtime/make namespace object","webpack://truth_will_set_you_free/./node_modules/gl-matrix/esm/common.js","webpack://truth_will_set_you_free/./node_modules/gl-matrix/esm/mat4.js","webpack://truth_will_set_you_free/./node_modules/gl-matrix/esm/vec3.js","webpack://truth_will_set_you_free/./node_modules/gl-matrix/esm/quat.js","webpack://truth_will_set_you_free/./node_modules/gl-matrix/esm/vec4.js","webpack://truth_will_set_you_free/./node_modules/gl-matrix/esm/mat3.js","webpack://truth_will_set_you_free/./apps/data_visualization/static/data_visualization/js/webgl-utils/shaders.js","webpack://truth_will_set_you_free/./apps/data_visualization/static/data_visualization/js/webgl-utils/buffers.js","webpack://truth_will_set_you_free/./apps/data_visualization/static/data_visualization/js/webgl-utils/render.js","webpack://truth_will_set_you_free/./apps/data_visualization/static/data_visualization/js/interactions.js","webpack://truth_will_set_you_free/./apps/data_visualization/static/data_visualization/js/main.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n * Common utilities\n * @module glMatrix\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};","import * as glMatrix from \"./common.js\";\n/**\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\n * @module mat4\n */\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\n * Calculates the determinant of a mat4\n *\n * @param {ReadonlyMat4} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to translate\n * @param {ReadonlyVec3} v vector to translate by\n * @returns {mat4} out\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 from a dual quat.\n *\n * @param {mat4} out Matrix\n * @param {ReadonlyQuat2} a Dual Quaternion\n * @returns {mat4} mat4 receiving operation result\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.hypot(m11, m12, m13);\n  out[1] = Math.hypot(m21, m22, m23);\n  out[2] = Math.hypot(m31, m32, m33);\n  return out;\n}\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\n\nexport function getRotation(out, mat) {\n  var scaling = new glMatrix.ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n  var is1 = 1 / scaling[0];\n  var is2 = 1 / scaling[1];\n  var is3 = 1 / scaling[2];\n  var sm11 = mat[0] * is1;\n  var sm12 = mat[1] * is2;\n  var sm13 = mat[2] * is3;\n  var sm21 = mat[4] * is1;\n  var sm22 = mat[5] * is2;\n  var sm23 = mat[6] * is3;\n  var sm31 = mat[8] * is1;\n  var sm32 = mat[9] * is2;\n  var sm33 = mat[10] * is3;\n  var trace = sm11 + sm22 + sm33;\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveNO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\n * Alias for {@link mat4.perspectiveNO}\n * @function\n */\n\nexport var perspective = perspectiveNO;\n/**\n * Generates a perspective projection matrix suitable for WebGPU with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveZO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = far * nf;\n    out[14] = far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -near;\n  }\n\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoNO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Alias for {@link mat4.orthoNO}\n * @function\n */\n\nexport var ortho = orthoNO;\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoZO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = near * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.hypot(z0, z1, z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.hypot(x0, x1, x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.hypot(y0, y1, y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat4\n *\n * @param {ReadonlyMat4} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \", \" + a[9] + \", \" + a[10] + \", \" + a[11] + \", \" + a[12] + \", \" + a[13] + \", \" + a[14] + \", \" + a[15] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\n}\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {ReadonlyVec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Calculates the length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the source vector\n * @returns {vec3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to ceil\n * @returns {vec3} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to floor\n * @returns {vec3} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to round\n * @returns {vec3} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Calculates the squared length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to negate\n * @returns {vec3} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to invert\n * @returns {vec3} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to normalize\n * @returns {vec3} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec3} out\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateX(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateY(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateZ(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Get the angle between two 3D vectors\n * @param {ReadonlyVec3} a The first operand\n * @param {ReadonlyVec3} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n      mag = mag1 * mag2,\n      cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec3 to zero\n *\n * @param {vec3} out the receiving vector\n * @returns {vec3} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec3.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\nimport * as mat3 from \"./mat3.js\";\nimport * as vec3 from \"./vec3.js\";\nimport * as vec4 from \"./vec4.js\";\n/**\n * Quaternion\n * @module quat\n */\n\n/**\n * Creates a new identity quat\n *\n * @returns {quat} a new quaternion\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[3] = 1;\n  return out;\n}\n/**\n * Set a quat to the identity quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\n\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\n * Sets a quat from the given angle and rotation axis,\n * then returns it.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyVec3} axis the axis around which to rotate\n * @param {Number} rad the angle in radians\n * @returns {quat} out\n **/\n\nexport function setAxisAngle(out, axis, rad) {\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  out[0] = s * axis[0];\n  out[1] = s * axis[1];\n  out[2] = s * axis[2];\n  out[3] = Math.cos(rad);\n  return out;\n}\n/**\n * Gets the rotation axis and angle for a given\n *  quaternion. If a quaternion is created with\n *  setAxisAngle, this method will return the same\n *  values as providied in the original parameter list\n *  OR functionally equivalent values.\n * Example: The quaternion formed by axis [0, 0, 1] and\n *  angle -90 is the same as the quaternion formed by\n *  [0, 0, 1] and 270. This method favors the latter.\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\n * @param  {ReadonlyQuat} q     Quaternion to be decomposed\n * @return {Number}     Angle, in radians, of the rotation\n */\n\nexport function getAxisAngle(out_axis, q) {\n  var rad = Math.acos(q[3]) * 2.0;\n  var s = Math.sin(rad / 2.0);\n\n  if (s > glMatrix.EPSILON) {\n    out_axis[0] = q[0] / s;\n    out_axis[1] = q[1] / s;\n    out_axis[2] = q[2] / s;\n  } else {\n    // If s is zero, return any axis (no rotation - axis does not matter)\n    out_axis[0] = 1;\n    out_axis[1] = 0;\n    out_axis[2] = 0;\n  }\n\n  return rad;\n}\n/**\n * Gets the angular distance between two unit quaternions\n *\n * @param  {ReadonlyQuat} a     Origin unit quaternion\n * @param  {ReadonlyQuat} b     Destination unit quaternion\n * @return {Number}     Angle, in radians, between the two quaternions\n */\n\nexport function getAngle(a, b) {\n  var dotproduct = dot(a, b);\n  return Math.acos(2 * dotproduct * dotproduct - 1);\n}\n/**\n * Multiplies two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {quat} out\n */\n\nexport function multiply(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\n * Rotates a quaternion by the given angle about the X axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\n\nexport function rotateX(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + aw * bx;\n  out[1] = ay * bw + az * bx;\n  out[2] = az * bw - ay * bx;\n  out[3] = aw * bw - ax * bx;\n  return out;\n}\n/**\n * Rotates a quaternion by the given angle about the Y axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\n\nexport function rotateY(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var by = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw - az * by;\n  out[1] = ay * bw + aw * by;\n  out[2] = az * bw + ax * by;\n  out[3] = aw * bw - ay * by;\n  return out;\n}\n/**\n * Rotates a quaternion by the given angle about the Z axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\n\nexport function rotateZ(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bz = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + ay * bz;\n  out[1] = ay * bw - ax * bz;\n  out[2] = az * bw + aw * bz;\n  out[3] = aw * bw - az * bz;\n  return out;\n}\n/**\n * Calculates the W component of a quat from the X, Y, and Z components.\n * Assumes that quaternion is 1 unit in length.\n * Any existing W component will be ignored.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate W component of\n * @returns {quat} out\n */\n\nexport function calculateW(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n  return out;\n}\n/**\n * Calculate the exponential of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @returns {quat} out\n */\n\nexport function exp(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  var r = Math.sqrt(x * x + y * y + z * z);\n  var et = Math.exp(w);\n  var s = r > 0 ? et * Math.sin(r) / r : 0;\n  out[0] = x * s;\n  out[1] = y * s;\n  out[2] = z * s;\n  out[3] = et * Math.cos(r);\n  return out;\n}\n/**\n * Calculate the natural logarithm of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @returns {quat} out\n */\n\nexport function ln(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  var r = Math.sqrt(x * x + y * y + z * z);\n  var t = r > 0 ? Math.atan2(r, w) / r : 0;\n  out[0] = x * t;\n  out[1] = y * t;\n  out[2] = z * t;\n  out[3] = 0.5 * Math.log(x * x + y * y + z * z + w * w);\n  return out;\n}\n/**\n * Calculate the scalar power of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @param {Number} b amount to scale the quaternion by\n * @returns {quat} out\n */\n\nexport function pow(out, a, b) {\n  ln(out, a);\n  scale(out, out, b);\n  exp(out, out);\n  return out;\n}\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\n\nexport function slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  var omega, cosom, sinom, scale0, scale1; // calc cosine\n\n  cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)\n\n  if (cosom < 0.0) {\n    cosom = -cosom;\n    bx = -bx;\n    by = -by;\n    bz = -bz;\n    bw = -bw;\n  } // calculate coefficients\n\n\n  if (1.0 - cosom > glMatrix.EPSILON) {\n    // standard case (slerp)\n    omega = Math.acos(cosom);\n    sinom = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  } // calculate final values\n\n\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n  return out;\n}\n/**\n * Generates a random unit quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\n\nexport function random(out) {\n  // Implementation of http://planning.cs.uiuc.edu/node198.html\n  // TODO: Calling random 3 times is probably not the fastest solution\n  var u1 = glMatrix.RANDOM();\n  var u2 = glMatrix.RANDOM();\n  var u3 = glMatrix.RANDOM();\n  var sqrt1MinusU1 = Math.sqrt(1 - u1);\n  var sqrtU1 = Math.sqrt(u1);\n  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\n  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\n  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\n  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\n  return out;\n}\n/**\n * Calculates the inverse of a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate inverse of\n * @returns {quat} out\n */\n\nexport function invert(out, a) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n  var invDot = dot ? 1.0 / dot : 0; // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n  out[0] = -a0 * invDot;\n  out[1] = -a1 * invDot;\n  out[2] = -a2 * invDot;\n  out[3] = a3 * invDot;\n  return out;\n}\n/**\n * Calculates the conjugate of a quat\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate conjugate of\n * @returns {quat} out\n */\n\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Creates a quaternion from the given 3x3 rotation matrix.\n *\n * NOTE: The resultant quaternion is not normalized, so you should be sure\n * to renormalize the quaternion yourself where necessary.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyMat3} m rotation matrix\n * @returns {quat} out\n * @function\n */\n\nexport function fromMat3(out, m) {\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  var fTrace = m[0] + m[4] + m[8];\n  var fRoot;\n\n  if (fTrace > 0.0) {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0); // 2w\n\n    out[3] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot; // 1/(4w)\n\n    out[0] = (m[5] - m[7]) * fRoot;\n    out[1] = (m[6] - m[2]) * fRoot;\n    out[2] = (m[1] - m[3]) * fRoot;\n  } else {\n    // |w| <= 1/2\n    var i = 0;\n    if (m[4] > m[0]) i = 1;\n    if (m[8] > m[i * 3 + i]) i = 2;\n    var j = (i + 1) % 3;\n    var k = (i + 2) % 3;\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n    out[i] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot;\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n  }\n\n  return out;\n}\n/**\n * Creates a quaternion from the given euler angle x, y, z.\n *\n * @param {quat} out the receiving quaternion\n * @param {x} Angle to rotate around X axis in degrees.\n * @param {y} Angle to rotate around Y axis in degrees.\n * @param {z} Angle to rotate around Z axis in degrees.\n * @returns {quat} out\n * @function\n */\n\nexport function fromEuler(out, x, y, z) {\n  var halfToRad = 0.5 * Math.PI / 180.0;\n  x *= halfToRad;\n  y *= halfToRad;\n  z *= halfToRad;\n  var sx = Math.sin(x);\n  var cx = Math.cos(x);\n  var sy = Math.sin(y);\n  var cy = Math.cos(y);\n  var sz = Math.sin(z);\n  var cz = Math.cos(z);\n  out[0] = sx * cy * cz - cx * sy * sz;\n  out[1] = cx * sy * cz + sx * cy * sz;\n  out[2] = cx * cy * sz - sx * sy * cz;\n  out[3] = cx * cy * cz + sx * sy * sz;\n  return out;\n}\n/**\n * Returns a string representation of a quatenion\n *\n * @param {ReadonlyQuat} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"quat(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\n * Creates a new quat initialized with values from an existing quaternion\n *\n * @param {ReadonlyQuat} a quaternion to clone\n * @returns {quat} a new quaternion\n * @function\n */\n\nexport var clone = vec4.clone;\n/**\n * Creates a new quat initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} a new quaternion\n * @function\n */\n\nexport var fromValues = vec4.fromValues;\n/**\n * Copy the values from one quat to another\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the source quaternion\n * @returns {quat} out\n * @function\n */\n\nexport var copy = vec4.copy;\n/**\n * Set the components of a quat to the given values\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} out\n * @function\n */\n\nexport var set = vec4.set;\n/**\n * Adds two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {quat} out\n * @function\n */\n\nexport var add = vec4.add;\n/**\n * Alias for {@link quat.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Scales a quat by a scalar number\n *\n * @param {quat} out the receiving vector\n * @param {ReadonlyQuat} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {quat} out\n * @function\n */\n\nexport var scale = vec4.scale;\n/**\n * Calculates the dot product of two quat's\n *\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\n\nexport var dot = vec4.dot;\n/**\n * Performs a linear interpolation between two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n * @function\n */\n\nexport var lerp = vec4.lerp;\n/**\n * Calculates the length of a quat\n *\n * @param {ReadonlyQuat} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport var length = vec4.length;\n/**\n * Alias for {@link quat.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Calculates the squared length of a quat\n *\n * @param {ReadonlyQuat} a vector to calculate squared length of\n * @returns {Number} squared length of a\n * @function\n */\n\nexport var squaredLength = vec4.squaredLength;\n/**\n * Alias for {@link quat.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Normalize a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quaternion to normalize\n * @returns {quat} out\n * @function\n */\n\nexport var normalize = vec4.normalize;\n/**\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyQuat} a The first quaternion.\n * @param {ReadonlyQuat} b The second quaternion.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport var exactEquals = vec4.exactEquals;\n/**\n * Returns whether or not the quaternions have approximately the same elements in the same position.\n *\n * @param {ReadonlyQuat} a The first vector.\n * @param {ReadonlyQuat} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport var equals = vec4.equals;\n/**\n * Sets a quaternion to represent the shortest rotation from one\n * vector to another.\n *\n * Both vectors are assumed to be unit length.\n *\n * @param {quat} out the receiving quaternion.\n * @param {ReadonlyVec3} a the initial vector\n * @param {ReadonlyVec3} b the destination vector\n * @returns {quat} out\n */\n\nexport var rotationTo = function () {\n  var tmpvec3 = vec3.create();\n  var xUnitVec3 = vec3.fromValues(1, 0, 0);\n  var yUnitVec3 = vec3.fromValues(0, 1, 0);\n  return function (out, a, b) {\n    var dot = vec3.dot(a, b);\n\n    if (dot < -0.999999) {\n      vec3.cross(tmpvec3, xUnitVec3, a);\n      if (vec3.len(tmpvec3) < 0.000001) vec3.cross(tmpvec3, yUnitVec3, a);\n      vec3.normalize(tmpvec3, tmpvec3);\n      setAxisAngle(out, tmpvec3, Math.PI);\n      return out;\n    } else if (dot > 0.999999) {\n      out[0] = 0;\n      out[1] = 0;\n      out[2] = 0;\n      out[3] = 1;\n      return out;\n    } else {\n      vec3.cross(tmpvec3, a, b);\n      out[0] = tmpvec3[0];\n      out[1] = tmpvec3[1];\n      out[2] = tmpvec3[2];\n      out[3] = 1 + dot;\n      return normalize(out, out);\n    }\n  };\n}();\n/**\n * Performs a spherical linear interpolation with two control points\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {ReadonlyQuat} c the third operand\n * @param {ReadonlyQuat} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\n\nexport var sqlerp = function () {\n  var temp1 = create();\n  var temp2 = create();\n  return function (out, a, b, c, d, t) {\n    slerp(temp1, a, d, t);\n    slerp(temp2, b, c, t);\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\n    return out;\n  };\n}();\n/**\n * Sets the specified quaternion with values corresponding to the given\n * axes. Each axis is a vec3 and is expected to be unit length and\n * perpendicular to all other specified axes.\n *\n * @param {ReadonlyVec3} view  the vector representing the viewing direction\n * @param {ReadonlyVec3} right the vector representing the local \"right\" direction\n * @param {ReadonlyVec3} up    the vector representing the local \"up\" direction\n * @returns {quat} out\n */\n\nexport var setAxes = function () {\n  var matr = mat3.create();\n  return function (out, view, right, up) {\n    matr[0] = right[0];\n    matr[3] = right[1];\n    matr[6] = right[2];\n    matr[1] = up[0];\n    matr[4] = up[1];\n    matr[7] = up[2];\n    matr[2] = -view[0];\n    matr[5] = -view[1];\n    matr[8] = -view[2];\n    return normalize(out, fromMat3(out, matr));\n  };\n}();","import * as glMatrix from \"./common.js\";\n/**\n * 4 Dimensional Vector\n * @module vec4\n */\n\n/**\n * Creates a new, empty vec4\n *\n * @returns {vec4} a new 4D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec4 initialized with values from an existing vector\n *\n * @param {ReadonlyVec4} a vector to clone\n * @returns {vec4} a new 4D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Creates a new vec4 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} a new 4D vector\n */\n\nexport function fromValues(x, y, z, w) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the source vector\n * @returns {vec4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\n\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\n * Multiplies two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n/**\n * Divides two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n/**\n * Math.ceil the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to ceil\n * @returns {vec4} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n/**\n * Math.floor the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to floor\n * @returns {vec4} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n/**\n * Returns the minimum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n/**\n * Returns the maximum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n/**\n * Math.round the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to round\n * @returns {vec4} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\n * Adds two vec4's after scaling the second operand by a scalar value\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec4} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\n * Calculates the length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\n * Negates the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to negate\n * @returns {vec4} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to invert\n * @returns {vec4} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to normalize\n * @returns {vec4} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  var len = x * x + y * y + z * z + w * w;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\n * Returns the cross-product of three vectors in a 4-dimensional space\n *\n * @param {ReadonlyVec4} result the receiving vector\n * @param {ReadonlyVec4} U the first vector\n * @param {ReadonlyVec4} V the second vector\n * @param {ReadonlyVec4} W the third vector\n * @returns {vec4} result\n */\n\nexport function cross(out, u, v, w) {\n  var A = v[0] * w[1] - v[1] * w[0],\n      B = v[0] * w[2] - v[2] * w[0],\n      C = v[0] * w[3] - v[3] * w[0],\n      D = v[1] * w[2] - v[2] * w[1],\n      E = v[1] * w[3] - v[3] * w[1],\n      F = v[2] * w[3] - v[3] * w[2];\n  var G = u[0];\n  var H = u[1];\n  var I = u[2];\n  var J = u[3];\n  out[0] = H * F - I * E + J * D;\n  out[1] = -(G * F) + I * C - J * B;\n  out[2] = G * E - H * C + J * A;\n  out[3] = -(G * D) + H * B - I * A;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec4} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  var aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec4} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec4} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n\n  var v1, v2, v3, v4;\n  var s1, s2;\n\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n/**\n * Transforms the vec4 with a mat4.\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec4} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n/**\n * Transforms the vec4 with a quat\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec4} out\n */\n\nexport function transformQuat(out, a, q) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3]; // calculate quat * vec\n\n  var ix = qw * x + qy * z - qz * y;\n  var iy = qw * y + qz * x - qx * z;\n  var iz = qw * z + qx * y - qy * x;\n  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set the components of a vec4 to zero\n *\n * @param {vec4} out the receiving vector\n * @returns {vec4} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec4} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\n * Alias for {@link vec4.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec4.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec4.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec4.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec4.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec4.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec4s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\n/**\n * 3x3 Matrix\n * @module mat3\n */\n\n/**\n * Creates a new identity mat3\n *\n * @returns {mat3} a new 3x3 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(9);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n  }\n\n  out[0] = 1;\n  out[4] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\n * Copies the upper-left 3x3 values into the given mat3.\n *\n * @param {mat3} out the receiving 3x3 matrix\n * @param {ReadonlyMat4} a   the source 4x4 matrix\n * @returns {mat3} out\n */\n\nexport function fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n/**\n * Creates a new mat3 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat3} a matrix to clone\n * @returns {mat3} a new 3x3 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Copy the values from one mat3 to another\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Create a new mat3 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} A new mat3\n */\n\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\n * Set the components of a mat3 to the given values\n *\n * @param {mat3} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} out\n */\n\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\n * Set a mat3 to the identity matrix\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b01 = a22 * a11 - a12 * a21;\n  var b11 = -a22 * a10 + a12 * a20;\n  var b21 = a21 * a10 - a11 * a20; // Calculate the determinant\n\n  var det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  out[0] = a11 * a22 - a12 * a21;\n  out[1] = a02 * a21 - a01 * a22;\n  out[2] = a01 * a12 - a02 * a11;\n  out[3] = a12 * a20 - a10 * a22;\n  out[4] = a00 * a22 - a02 * a20;\n  out[5] = a02 * a10 - a00 * a12;\n  out[6] = a10 * a21 - a11 * a20;\n  out[7] = a01 * a20 - a00 * a21;\n  out[8] = a00 * a11 - a01 * a10;\n  return out;\n}\n/**\n * Calculates the determinant of a mat3\n *\n * @param {ReadonlyMat3} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n/**\n * Multiplies two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b00 = b[0],\n      b01 = b[1],\n      b02 = b[2];\n  var b10 = b[3],\n      b11 = b[4],\n      b12 = b[5];\n  var b20 = b[6],\n      b21 = b[7],\n      b22 = b[8];\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n/**\n * Translate a mat3 by the given vector\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to translate\n * @param {ReadonlyVec2} v vector to translate by\n * @returns {mat3} out\n */\n\nexport function translate(out, a, v) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      x = v[0],\n      y = v[1];\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n/**\n * Rotates a mat3 by the given angle\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\n\nexport function rotate(out, a, rad) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n}\n/**\n * Scales the mat3 by the dimensions in the given vec2\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to rotate\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\n * @returns {mat3} out\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1];\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.translate(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyVec2} v Translation vector\n * @returns {mat3} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.rotate(dest, dest, rad);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.scale(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyVec2} v Scaling vector\n * @returns {mat3} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Copies the values from a mat2d into a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat2d} a the matrix to copy\n * @returns {mat3} out\n **/\n\nexport function fromMat2d(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n  return out;\n}\n/**\n * Calculates a 3x3 matrix from the given quaternion\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat3} out\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n  return out;\n}\n/**\n * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyMat4} a Mat4 to derive the normal matrix from\n *\n * @returns {mat3} out\n */\n\nexport function normalFromMat4(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  return out;\n}\n/**\n * Generates a 2D projection matrix with the given bounds\n *\n * @param {mat3} out mat3 frustum matrix will be written into\n * @param {number} width Width of your gl context\n * @param {number} height Height of gl context\n * @returns {mat3} out\n */\n\nexport function projection(out, width, height) {\n  out[0] = 2 / width;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -2 / height;\n  out[5] = 0;\n  out[6] = -1;\n  out[7] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat3\n *\n * @param {ReadonlyMat3} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat3\n *\n * @param {ReadonlyMat3} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8]);\n}\n/**\n * Adds two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat3} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n/**\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat3} out the receiving vector\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat3} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat3} a The first matrix.\n * @param {ReadonlyMat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat3} a The first matrix.\n * @param {ReadonlyMat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7],\n      a8 = a[8];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7],\n      b8 = b[8];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));\n}\n/**\n * Alias for {@link mat3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat3.subtract}\n * @function\n */\n\nexport var sub = subtract;","export function loadShader(gl, type, source) {\n    const shader = gl.createShader(type);\n    gl.shaderSource(shader, source);\n    gl.compileShader(shader);\n\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n        const shaderType = type === gl.VERTEX_SHADER ? 'VERTEX_SHADER' : 'FRAGMENT_SHADER';\n        console.error(`An error occurred compiling the ${shaderType}: ${gl.getShaderInfoLog(shader)}`);\n        console.error(`Shader source that failed to compile:\\n${source}`);\n        gl.deleteShader(shader);\n        return null;\n    }\n\n    return shader;\n}\n\nexport function initShaderProgram(gl, vsSource, fsSource) {\n    const vertexShader = loadShader(gl, gl.VERTEX_SHADER, vsSource);\n    const fragmentShader = loadShader(gl, gl.FRAGMENT_SHADER, fsSource);\n\n    const shaderProgram = gl.createProgram();\n    gl.attachShader(shaderProgram, vertexShader);\n    gl.attachShader(shaderProgram, fragmentShader);\n    gl.linkProgram(shaderProgram);\n\n    if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {\n        console.error('Unable to initialize the shader program: ' + gl.getProgramInfoLog(shaderProgram));\n        return null;\n    }\n\n    return shaderProgram;\n}\n\n// Vertex shader program remains unchanged\nexport const vsSource = `\n    attribute vec3 aVertexPosition;\n    uniform mat4 uModelViewMatrix;\n    uniform mat4 uProjectionMatrix;\n\n    void main(void) {\n        gl_Position = uProjectionMatrix * uModelViewMatrix * vec4(aVertexPosition, 1.0);\n    }\n`;\n\n// Fragment shader program updated to set the color to red\nexport const fsSource = `\n    precision mediump float;\n    uniform vec4 uColor; // Add this uniform for dynamic color control\n\n    void main(void) {\n        gl_FragColor = uColor; // Use the uniform color\n    }\n`;","export function initBuffers(gl) {\n    if (!gl) {\n        console.error('WebGL context is not available.');\n        return null;\n    }\n\n    // Buffer for the cube's vertices\n    const positionBuffer = gl.createBuffer();\n    if (!positionBuffer) {\n        console.error('Failed to create a position buffer.');\n        return null;\n    }\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n\n    const positions = [\n        // Front face\n        -1.0, -1.0,  1.0,\n         1.0, -1.0,  1.0,\n         1.0,  1.0,  1.0,\n        -1.0,  1.0,  1.0,\n\n        // Back face\n        -1.0, -1.0, -1.0,\n        -1.0,  1.0, -1.0,\n         1.0,  1.0, -1.0,\n         1.0, -1.0, -1.0,\n\n        // Top face\n        -1.0,  1.0, -1.0,\n        -1.0,  1.0,  1.0,\n         1.0,  1.0,  1.0,\n         1.0,  1.0, -1.0,\n\n        // Bottom face\n        -1.0, -1.0, -1.0,\n         1.0, -1.0, -1.0,\n         1.0, -1.0,  1.0,\n        -1.0, -1.0,  1.0,\n\n        // Right face\n         1.0, -1.0, -1.0,\n         1.0,  1.0, -1.0,\n         1.0,  1.0,  1.0,\n         1.0, -1.0,  1.0,\n\n        // Left face\n        -1.0, -1.0, -1.0,\n        -1.0, -1.0,  1.0,\n        -1.0,  1.0,  1.0,\n        -1.0,  1.0, -1.0,\n    ];\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW);\n\n    // Create a buffer for the cube's face indices\n    const indexBuffer = gl.createBuffer();\n    if (!indexBuffer) {\n        console.error('Failed to create an index buffer.');\n        return null;\n    }\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);\n\n    const indices = [\n        0, 1, 2,     0, 2, 3,    // Front face\n        4, 5, 6,     4, 6, 7,    // Back face\n        8, 9, 10,    8, 10, 11,  // Top face\n        12, 13, 14,  12, 14, 15, // Bottom face\n        16, 17, 18,  16, 18, 19, // Right face\n        20, 21, 22,  20, 22, 23  // Left face\n    ];\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indices), gl.STATIC_DRAW);\n\n    // Correct edgeIndices to outline the cube correctly\n    const edgeIndices = [\n        0, 1, 1, 2, 2, 3, 3, 0, // Front face\n        4, 5, 5, 6, 6, 7, 7, 4, // Back face\n        0, 4, 1, 5, 2, 6, 3, 7, // Sides\n        8, 9, 9, 10, 10, 11, 11, 8, // Top\n        12, 13, 13, 14, 14, 15, 15, 12, // Bottom\n        16, 17, 17, 18, 18, 19, 19, 16, // Right\n        20, 21, 21, 22, 22, 23, 23, 20  // Left\n    ];\n\n    const edgeBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, edgeBuffer);\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(edgeIndices), gl.STATIC_DRAW);\n\n    // Calculate edgeCount right after defining edgeIndices\n    const edgeCount = edgeIndices.length / 2; // Correctly calculate edge count here\n\n\n    return {\n        position: positionBuffer,\n        indices: indexBuffer,\n        edgeIndices: edgeBuffer,\n        indexCount: indices.length,\n        edgeCount: edgeCount,\n    };\n}\n","import { mat4 } from 'gl-matrix';\n\nexport function drawScene(gl, programInfo, buffers, rotationMatrix) {\n    if (!gl) {\n        console.error('WebGL context is not available.');\n        return;\n    }\n\n    // Ensure correct shader program is active\n    gl.useProgram(programInfo.program);\n\n    // Setup the perspective matrix\n    const fieldOfView = 45 * Math.PI / 180; // in radians\n    const aspect = gl.canvas.clientWidth / gl.canvas.clientHeight;\n    const zNear = 0.1;\n    const zFar = 100.0;\n    const projectionMatrix = mat4.create();\n    mat4.perspective(projectionMatrix, fieldOfView, aspect, zNear, zFar);\n\n    // Setup the model-view matrix\n    const modelViewMatrix = mat4.create(); // This acts as the initial, untranslated model-view matrix\n    mat4.translate(modelViewMatrix, modelViewMatrix, [0.0, 0.0, -6.0]); // Translate back\n    mat4.multiply(modelViewMatrix, modelViewMatrix, rotationMatrix); // Apply rotation\n\n    // Clear the canvas\n    gl.clearColor(0.5, 0.5, 0.5, 1.0); // Set clear color to gray\n    gl.clearDepth(1.0); // Clear everything\n    gl.enable(gl.DEPTH_TEST); // Enable depth testing\n    gl.depthFunc(gl.LEQUAL); // Near things obscure far things\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n    // Setup for drawing the object\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffers.position);\n    gl.vertexAttribPointer(programInfo.attribLocations.vertexPosition, 3, gl.FLOAT, false, 0, 0);\n    gl.enableVertexAttribArray(programInfo.attribLocations.vertexPosition);\n\n    // Set the shader uniforms\n    gl.uniformMatrix4fv(programInfo.uniformLocations.projectionMatrix, false, projectionMatrix);\n    gl.uniformMatrix4fv(programInfo.uniformLocations.modelViewMatrix, false, modelViewMatrix);\n    gl.uniform4f(programInfo.uniformLocations.uColor, 0.0, 0.0, 0.0, 1.0); // Set color to black for edges\n\n    // Draw the object\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffers.indices);\n    gl.drawElements(gl.TRIANGLES, buffers.indexCount, gl.UNSIGNED_SHORT, 0);\n\n    // Optionally draw cube edges\n    gl.drawElements(gl.LINES, buffers.edgeCount, gl.UNSIGNED_SHORT, 0);\n}\n\nexport function render(gl, programInfo, buffers, rotationMatrix) {\n    requestAnimationFrame(() => {\n        drawScene(gl, programInfo, buffers, rotationMatrix);\n        requestAnimationFrame(render.bind(null, gl, programInfo, buffers, rotationMatrix));\n    });\n}","// Enhanced Utility functions for vector operations\nclass Vector3 {\n    constructor(x, y, z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n\n    subtract(v) {\n        return new Vector3(this.x - v.x, this.y - v.y, this.z - v.z);\n    }\n\n    cross(v) {\n        return new Vector3(\n            this.y * v.z - this.z * v.y,\n            this.z * v.x - this.x * v.z,\n            this.x * v.y - this.y * v.x\n        );\n    }\n\n    dot(v) {\n        return this.x * v.x + this.y * v.y + this.z * v.z;\n    }\n\n    length() {\n        return Math.sqrt(this.dot(this));\n    }\n\n    normalize() {\n        const len = this.length();\n        return len > 0 ? new Vector3(this.x / len, this.y / len, this.z / len) : new Vector3(0, 0, 0);\n    }\n}\n\nfunction toRadians(angleInDegrees) {\n    return angleInDegrees * Math.PI / 180;\n}\n\n// Interaction logic\nclass Interaction {\n    constructor(canvas) {\n        this.canvas = canvas;\n        this.isDragging = false;\n        this.previousMousePosition = new Vector3(0, 0, 0);\n        this.smoothMouse = new Vector3(0, 0, 0); // New smoothed mouse position\n        this.smoothingFactor = 0.5; // New smoothing factor\n        this.axis = new Vector3(0, 1, 0);\n        this.angle = 0;\n        this.sensitivityFactor = 15;  // Adjusted sensitivity factor\n\n        // Bind event handlers\n        this.canvas.addEventListener('mousedown', this.handleMouseDown.bind(this), false);\n        this.canvas.addEventListener('mousemove', this.handleMouseMove.bind(this), false);\n        this.canvas.addEventListener('mouseup', this.handleMouseUp.bind(this), false);\n        this.canvas.addEventListener('mouseleave', this.handleMouseUp.bind(this), false);\n    }\n\n    mapToSphere(x, y) {\n        const point = new Vector3(x, y, 0);\n        const squareDist = x * x + y * y;\n        if (squareDist <= 1) {\n            point.z = Math.sqrt(1 - squareDist);\n        } else {\n            point.z = 0;\n        }\n        return point.normalize();\n    }\n\n    handleMouseDown(event) {\n        this.isDragging = true;\n        const x = (event.clientX / this.canvas.clientWidth) * 2 - 1;\n        const y = -(event.clientY / this.canvas.clientHeight) * 2 + 1;\n        this.previousMousePosition = new Vector3(x, y, 0);\n        this.smoothMouse = new Vector3(x, y, 0); // Initialize smoothMouse with current position\n    }\n\n    handleMouseUp(event) {\n        this.isDragging = false;\n    }\n\n    handleMouseMove(event) {\n        if (!this.isDragging) return;\n\n        const x = (event.clientX / this.canvas.clientWidth) * 2 - 1;\n        const y = -(event.clientY / this.canvas.clientHeight) * 2 + 1;\n\n        // Apply smoothing\n        this.smoothMouse.x += (x - this.smoothMouse.x) * this.smoothingFactor;\n        this.smoothMouse.y += (y - this.smoothMouse.y) * this.smoothingFactor;\n\n        const from = this.mapToSphere(this.previousMousePosition.x, this.previousMousePosition.y);\n        const to = this.mapToSphere(this.smoothMouse.x, this.smoothMouse.y);\n\n        this.axis = from.cross(to);\n        const dotProduct = Math.max(-1, Math.min(from.dot(to), 1));\n        this.angle = Math.acos(dotProduct) * this.sensitivityFactor;\n\n        if (typeof window.updateScene === 'function') {\n            window.webGLInteraction.axis = [this.axis.x, this.axis.y, this.axis.z];\n            window.webGLInteraction.angle = this.angle;\n            window.updateScene();\n        }\n\n        this.previousMousePosition = new Vector3(this.smoothMouse.x, this.smoothMouse.y, 0); // Update previousMousePosition to smoothed position for continuity\n    }\n}\n\n// Initialize the interaction object and bind it to a specific canvas\nconst webGLInteraction = new Interaction(document.getElementById('webgl-canvas'));\nexport { webGLInteraction, toRadians };\n","// Import necessary modules and functions\nimport { mat4, quat, vec3 } from 'gl-matrix';\nimport { vsSource, fsSource, loadShader, initShaderProgram } from './webgl-utils/shaders.js';\nimport { initBuffers } from './webgl-utils/buffers.js';\nimport { drawScene } from './webgl-utils/render.js';\nimport { webGLInteraction, toRadians } from './interactions.js';\n\n\nasync function main() {\n    console.log('Starting main function.');\n    const canvas = document.getElementById('webgl-canvas');\n    const gl = canvas.getContext('webgl');\n\n    if (!gl) {\n        console.error('Unable to initialize WebGL.');\n        return;\n    } else {\n        console.log('WebGL context initialized.');\n    }\n\n    // Assign globally accessible WebGL utilities\n    window.gl = gl;\n    window.rotationMatrix = mat4.create();\n    window.loadShader = loadShader;\n    window.initShaderProgram = initShaderProgram;\n    window.initBuffers = initBuffers;\n    window.drawScene = drawScene;\n    window.toRadians = toRadians;\n    window.webGLInteraction = webGLInteraction;\n    window.vsSource = vsSource;\n    window.fsSource = fsSource;\n    window.currentQuat = quat.create();\n    window.targetQuat = quat.create();\n\n    // Initialize rotation angles\n    window.rotationAngles = { x: 0, y: 0, z: 0 };\n    window.lastRotationAngles = { x: 0, y: 0, z: 0 };\n\n    // Shader program initialization and validation\n    console.log('Initializing shader program.');\n    const shaderProgram = await window.initShaderProgram(gl, window.vsSource, window.fsSource);\n    if (!shaderProgram) {\n        console.error('Initializing shader program failed.');\n        return;\n    } else {\n        console.log('Shader program initialized successfully.');\n    }\n\n    window.shaderProgram = shaderProgram;\n    console.log('Shader program:', window.shaderProgram);\n\n    // Set program info and validate attribute and uniform locations\n    window.programInfo = {\n        program: shaderProgram,\n        attribLocations: {\n            vertexPosition: gl.getAttribLocation(shaderProgram, 'aVertexPosition'),\n        },\n        uniformLocations: {\n            projectionMatrix: gl.getUniformLocation(shaderProgram, 'uProjectionMatrix'),\n            modelViewMatrix: gl.getUniformLocation(shaderProgram, 'uModelViewMatrix'),\n            uColor: gl.getUniformLocation(shaderProgram, 'uColor'),\n        },\n    };\n    console.log('Attribute and Uniform Locations:', window.programInfo.attribLocations, window.programInfo.uniformLocations);\n\n    // Buffers initialization and validation\n    console.log('Initializing buffers.');\n    window.buffers = await window.initBuffers(gl);\n    if (!window.buffers) {\n        console.error('Initializing buffers failed.');\n        return;\n    } else {\n        console.log('Buffers initialized successfully.');\n    }\n\n    // Initialize and set up the projection matrix\n    window.projectionMatrix = mat4.create();\n    mat4.perspective(window.projectionMatrix, 45 * Math.PI / 180, gl.canvas.clientWidth / gl.canvas.clientHeight, 0.1, 100.0);\n\n    // Define and start the render loop\n    window.renderLoop = function() {\n        console.log('Render loop tick.');\n        window.drawScene(window.gl, window.programInfo, window.buffers, window.rotationMatrix);\n        requestAnimationFrame(window.renderLoop);\n    };\n\n    // Call drawScene initially before starting the render loop\n    window.drawScene(window.gl, window.programInfo, window.buffers, window.rotationAngles);\n    console.log('Initial scene rendered.');\n\n    // Start the render loop\n    console.log('Starting render loop.');\n    window.renderLoop();\n}\n\nwindow.updateScene = () => {\n    console.log('Starting updateScene'); // Log when updateScene starts\n\n    if (window.webGLInteraction &&\n        typeof window.webGLInteraction.axis !== 'undefined' &&\n        typeof window.webGLInteraction.angle !== 'undefined') {\n\n        // Normalize the rotation axis\n        let normalizedAxis = vec3.create();\n        vec3.normalize(normalizedAxis, window.webGLInteraction.axis);\n\n        // Create and set the rotation quaternion based on the normalized axis and the angle\n        const quatInstance = quat.create();\n        quat.setAxisAngle(quatInstance, normalizedAxis, window.webGLInteraction.angle);\n\n        // Log the state of the quaternion before and after setting the axis angle\n        console.log('Quaternion before setAxisAngle:', quat.create()); // Log initial state for comparison\n        console.log('Quaternion after setAxisAngle:', quatInstance); // Log after setting axis and angle\n\n        // Convert the quaternion to a rotation matrix for rendering\n        const testMatrix = mat4.create();\n        mat4.fromQuat(testMatrix, quatInstance);\n        console.log('Rotation matrix from quaternion (test):', testMatrix); // Log the test rotation matrix\n\n        // Check for NaN values in the rotation matrix before applying it to avoid errors\n        if (testMatrix.some(isNaN)) {\n            console.error('Rotation matrix contains NaN values. Aborting scene update.');\n            return;\n        }\n\n        // If the matrix is valid, update the global rotation matrix and redraw the scene\n        mat4.copy(window.rotationMatrix, testMatrix); // Use mat4.copy to update the global matrix safely\n        console.log('Updated global rotationMatrix:', window.rotationMatrix); // Log after updating the rotation matrix\n\n        // Redraw the scene with the updated rotation\n        window.drawScene(window.gl, window.programInfo, window.buffers, window.rotationMatrix);\n    }\n};\n\n// Ensure the main function is called when the document is fully loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n    console.log('Document loaded. Starting main function.');\n    window.main = main;\n    window.main(); // Execute main function\n});\n\n// Expose all gl-matrix utilities globally for debugging\nwindow.mat4 = mat4;\nwindow.quat = quat;\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","EPSILON","ARRAY_TYPE","Float32Array","Array","RANDOM","Math","random","create","out","clone","a","copy","fromValues","m00","m01","m02","m03","m10","m11","m12","m13","m20","m21","m22","m23","m30","m31","m32","m33","set","identity","transpose","a01","a02","a03","a12","a13","a23","invert","a00","a10","a11","a20","a21","a22","a30","a31","a32","a33","b00","b01","b02","b03","b04","b05","b06","b07","b08","b09","b10","b11","det","adjoint","determinant","multiply","b","b0","b1","b2","b3","translate","v","x","y","z","scale","rotate","rad","axis","s","c","t","b12","b20","b21","b22","len","hypot","sin","cos","rotateX","rotateY","rotateZ","fromTranslation","fromScaling","fromRotation","fromXRotation","fromYRotation","fromZRotation","fromRotationTranslation","q","w","x2","y2","z2","xx","xy","xz","yy","yz","zz","wx","wy","wz","fromQuat2","translation","bx","by","bz","bw","ax","ay","az","aw","magnitude","getTranslation","mat","getScaling","getRotation","scaling","is1","is2","is3","sm11","sm12","sm13","sm21","sm22","sm23","sm31","sm32","sm33","trace","S","sqrt","fromRotationTranslationScale","sx","sy","sz","fromRotationTranslationScaleOrigin","ox","oy","oz","out0","out1","out2","out4","out5","out6","out8","out9","out10","fromQuat","yx","zx","zy","frustum","left","right","bottom","top","near","far","rl","tb","nf","perspectiveNO","fovy","aspect","f","tan","Infinity","PI","i","arguments","length","perspective","perspectiveZO","perspectiveFromFieldOfView","fov","upTan","upDegrees","downTan","downDegrees","leftTan","leftDegrees","rightTan","rightDegrees","xScale","yScale","orthoNO","lr","bt","ortho","orthoZO","lookAt","eye","center","up","x0","x1","y0","y1","z0","z1","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","abs","targetTo","target","str","frob","add","subtract","multiplyScalar","multiplyScalarAndAdd","exactEquals","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","a14","a15","b4","b5","b6","b7","b8","b9","b13","b14","b15","max","mul","sub","normalize","cross","setAxisAngle","getAxisAngle","out_axis","acos","getAngle","dotproduct","calculateW","exp","r","et","ln","atan2","log","pow","slerp","omega","cosom","sinom","scale0","scale1","u1","u2","u3","sqrt1MinusU1","sqrtU1","dot","invDot","conjugate","fromMat3","m","fRoot","fTrace","j","k","fromEuler","halfToRad","cx","cy","cz","tmpvec3","xUnitVec3","yUnitVec3","temp1","temp2","matr","rotationTo","sqlerp","d","setAxes","view","loadShader","gl","type","source","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","shaderType","VERTEX_SHADER","console","error","concat","getShaderInfoLog","deleteShader","initShaderProgram","vsSource","fsSource","vertexShader","fragmentShader","FRAGMENT_SHADER","shaderProgram","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","initBuffers","positionBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","indexBuffer","ELEMENT_ARRAY_BUFFER","indices","Uint16Array","edgeIndices","edgeBuffer","position","indexCount","edgeCount","drawScene","programInfo","buffers","rotationMatrix","useProgram","program","fieldOfView","canvas","clientWidth","clientHeight","projectionMatrix","mat4","modelViewMatrix","clearColor","clearDepth","enable","DEPTH_TEST","depthFunc","LEQUAL","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","vertexAttribPointer","attribLocations","vertexPosition","FLOAT","enableVertexAttribArray","uniformMatrix4fv","uniformLocations","uniform4f","uColor","drawElements","TRIANGLES","UNSIGNED_SHORT","LINES","Vector3","_classCallCheck","this","_createClass","toRadians","angleInDegrees","webGLInteraction","Interaction","isDragging","previousMousePosition","smoothMouse","smoothingFactor","angle","sensitivityFactor","addEventListener","handleMouseDown","bind","handleMouseMove","handleMouseUp","point","squareDist","event","clientX","clientY","from","mapToSphere","to","dotProduct","min","window","updateScene","document","getElementById","_regeneratorRuntime","e","n","iterator","asyncIterator","u","define","configurable","writable","wrap","Generator","Context","makeInvokeMethod","tryCatch","arg","h","l","GeneratorFunction","GeneratorFunctionPrototype","p","getPrototypeOf","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","asyncGeneratorStep","gen","reject","_next","_throw","info","main","_main","apply","fn","_callee","_context","getContext","currentQuat","quat","targetQuat","rotationAngles","lastRotationAngles","getAttribLocation","getUniformLocation","renderLoop","requestAnimationFrame","self","args","err","undefined","normalizedAxis","vec3","quatInstance","testMatrix","some"],"sourceRoot":""}